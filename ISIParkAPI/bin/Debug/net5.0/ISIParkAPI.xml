<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ISIParkAPI</name>
    </assembly>
    <members>
        <member name="T:ISIParkAPI.Controllers.AddressController">
            <summary>
            Class controller of Address, this class have all routes of AddressRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.AddressController._addressRepository">
            <summary>
            Create a instance of Interface Address
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IAddressRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="addressRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.GetAllAddress">
            <summary>
            Route to give all addresses from database, this method uses a http get
            </summary>
            <returns>All addresses</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.GetAddressDetails(System.Int32)">
            <summary>
            Route to give only one address from database, this method uses a http get
            </summary>
            <param name="id">Id of the address that we want</param>
            <returns>The address that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.InsertAddressHistory(ISIParkAPI.Model.Address)">
            <summary>
            Route to insert a new address, this method uses a http post
            </summary>
            <param name="address">An object to represent Address</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.UpdateAddress(ISIParkAPI.Model.Address)">
            <summary>
            Route to update an address from database, this method uses a http put
            </summary>
            <param name="address">An object to represent Address</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AddressController.DeleteAddress(System.Int32)">
            <summary>
            Route to delete an address from database, this method uses a http delete
            </summary>
            <param name="id">Id of the address that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.AdminMessageController">
            <summary>
            Class controller of AdminMessage, this class have all routes of AdminMessageRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.AdminMessageController._adminMessageRepository">
            <summary>
            Create a instance of Interface AdminMessage
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IAdminMessageRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="adminMessageRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.GetAllAdminMessage">
            <summary>
            Route to give all messages from database, this method uses a http get
            </summary>
            <returns>All addresses</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.GetAdminMessageDetails(System.Int32)">
            <summary>
            Route to give only one message from database, this method uses a http get
            </summary>
            <param name="id">Id of the message that we want</param>
            <returns>The message that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.InsertAdminMessageHistory(ISIParkAPI.Model.AdminMessage)">
            <summary>
            Route to insert a new message, this method uses a http post
            </summary>
            <param name="adminMessage">An object to represent AdminMessage</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.UpdateAdminMessage(ISIParkAPI.Model.AdminMessage)">
            <summary>
            Route to update a message from database, this method uses a http put
            </summary>
            <param name="adminMessage">An objetc to represent AdminMessage</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AdminMessageController.DeleteAdminMessage(System.Int32)">
            <summary>
            Route to delete a message from database, this method uses a http delete
            </summary>
            <param name="id">Id of the message that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.AuthController">
            <summary>
            Authentication controller, this class is responsible for creating user and their login, with the tokens
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.AuthController._configuration">
            <summary>
            Create a instance of Interface Configuration
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.AuthController._userRepository">
            <summary>
            Create a instance of Interface User
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,ISIParkAPI.Data.Repositories.Interfaces.IUserRepository,ISIParkAPI.Data.MySQLConfiguration)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="configuration"></param>
            <param name="userRepository"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.InsertUser(ISIParkAPI.Model.UserDTO)">
            <summary>
            Methods that inserts a new user
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.Login(ISIParkAPI.Model.UserLogin)">
            <summary>
            Methods for a user to log in and return the respective token
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.CreateTokenAdmin(ISIParkAPI.Model.UserDTO)">
            <summary>
            Private method for creating the admin token
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.CreateToken(ISIParkAPI.Model.UserDTO)">
            <summary>
            Private method for creating a user's token
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.CreatePasswordHash(System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Auxiliary method for the creation of the PasswordHash
            </summary>
            <param name="password"></param>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.AuthController.VerifyPasswordHash(System.String,System.Byte[],System.Byte[])">
            <summary>
            Auxiliary method for the verification of the PasswordHash
            </summary>
            <param name="password"></param>
            <param name="passwordHash"></param>
            <param name="passwordSalt"></param>
            <returns></returns>
        </member>
        <member name="F:ISIParkAPI.Controllers.BankController._bankRepository">
            <summary>
            Create an instance of QRRepository
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.BankController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IBankRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="bankRepository"></param>
        </member>
        <member name="T:ISIParkAPI.Controllers.ContactTypeController">
            <summary>
            Class controller of ContactType, this class have all routes of ContactTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.ContactTypeController._contactTypeRepository">
            <summary>
            Create a instance of Interface ContactType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IContactTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="contactTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.GetAllContactType">
            <summary>
            Route to give all contact types from database, this method uses a http get
            </summary>
            <returns>All types</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.GetContactTypeDetails(System.Int32)">
            <summary>
            Route to give only one type from database, this method uses a http get
            </summary>
            <param name="id">Id of the type that we want</param>
            <returns>The type that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.InsertContactType(ISIParkAPI.Model.ContactType)">
            <summary>
            Route to insert a new type, this method uses a http post
            </summary>
            <param name="contactType">An object to represent ContactType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.UpdateContactType(ISIParkAPI.Model.ContactType)">
            <summary>
            Route to update a type, this method uses a http post
            </summary>
            <param name="contactType">An object to represent ContactType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ContactTypeController.DeleteContactType(System.Int32)">
            <summary>
            Route to delete a type from database, this method uses a http delete
            </summary>
            <param name="id">Id of the type that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.HistoryController">
            <summary>
            Class controller of History, this class have all routes of HistoryRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.HistoryController._historyRepository">
            <summary>
            Create a instance of Interface History
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IHistoryRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="historyRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.GetAllHistory">
            <summary>
            Route to give all Historic from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.GetHistoryDetails(System.Int32)">
            <summary>
            Route to give only one historic from database, this method uses a http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.InsertHistory(ISIParkAPI.Model.History)">
            <summary>
            Route to insert a new histric of place, this method uses a http post
            </summary>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.UpdateHistory(ISIParkAPI.Model.History)">
            <summary>
            Route to update a historic, this method uses a http post
            </summary>
            <param name="history"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.HistoryController.DeletePersonalData(System.Int32)">
            <summary>
            Route to delete a historic from database, this method uses a http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.LicensePlateSensorController">
            <summary>
            Class controller of LicensePlateSensor, this class have all routes of LicensePlateSensorRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.LicensePlateSensorController._licensePlateSensorRepository">
            <summary>
            Create a instance of Interface LicensePlateSensor
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.ILicensePlateSensorRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="licensePlateSensorRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.GetAllPlateSensor">
            <summary>
            Route to give all vehicles that was read from license plate sensor, this method uses a http get
            </summary>
            <returns>All vehicles</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.GetPlateSensorDetails(System.Int32)">
            <summary>
            Route to give only one user's vehicle from database, this method uses a http get
            </summary>
            <param name="nif">NIF of the user that we want</param>
            <returns>The user's vehicle that corresponds the nif entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.InsertVehicleSensor(ISIParkAPI.Model.LicensePlateSensor)">
            <summary>
            Route to insert a new user's vehicle that passes on license plate sensor, this method uses a http post
            </summary>
            <param name="licensePlateSensor">An object to represent LicensePlateSensor</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.UpdateVehicleSensor(ISIParkAPI.Model.LicensePlateSensor)">
            <summary>
            Route to update a user's vehicle that passes on license plate sensor, this method uses a http post
            </summary>
            <param name="licensePlateSensor">An object to represent LicensePlateSensor</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.LicensePlateSensorController.DeleteVehicleSensor(System.Int32)">
            <summary>
            Route to delete a user's vehicle that passes on license plate sensor from database, this method uses a http delete
            </summary>
            <param name="nif">Nif of the user's vehicle that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="F:ISIParkAPI.Controllers.ParkingSensorController._parkingSensorRepository">
            <summary>
            Create a instance of Interface Address
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IParkingSensorRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="parkingSensorRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.GetAllParkingSensor">
            <summary>
            Route to give all parking sensors from database, this method uses a http get
            </summary>
            <returns>All parking sensors</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.GetParkingSensorDetails(System.Int32)">
            <summary>
            Route to give only one parking sensor from database, this method uses a http get
            </summary>
            <param name="lugar">Sensor that we want</param>
            <returns>The sensor that corresponds the place entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.InsertParkingSensor(ISIParkAPI.Model.ParkingSensor)">
            <summary>
            Route to insert a new parking sensor, this method uses a http post
            </summary>
            <param name="parkingSensor">An object to represent Parking Sensor</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.UpdateParkingSensor(ISIParkAPI.Model.ParkingSensor)">
            <summary>
            Route to update parking sensor from database, this method uses a http put
            </summary>
            <param name="parkingSensor">An object to represent Parking Sensor</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ParkingSensorController.DeleteParkingSensor(System.Int32)">
            <summary>
            Route to delete a parking sensor from database, this method uses a http delete
            </summary>
            <param name="lugar">Parking Sensor that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.PersonalDataController">
            <summary>
            Class controller of PersonalData, this class have all routes of PersonalDataRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.PersonalDataController._personalDataRepository">
            <summary>
            Create a instance of Interface PersonalData
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IPersonalDataRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="personalDataRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.GetAllPersonalData">
            <summary>
            Route to give all personal data from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.GetPersonalDataDetails(System.Int32)">
            <summary>
            Route to give one personal data from database, this method uses a http get
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.GetPersonalByEmail(System.String)">
            <summary>
            Route to give one personal data from database, this method uses a http get
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.InsertPersonalData(ISIParkAPI.Model.PersonalData)">
            <summary>
            Route to insert a new user, this method uses a http post
            </summary>
            <param name="personalData"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.UpdatePersonalData(ISIParkAPI.Model.PersonalData)">
            <summary>
            Route to update one personal data , this method uses a http post
            </summary>
            <param name="personalData"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PersonalDataController.DeletePersonalData(System.Int32)">
            <summary>
            Route to delete one personal data from database, this method uses a http delete
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.PlaceController">
            <summary>
            Class controller of Place, this class have all routes of PlaceRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.PlaceController._placeRepository">
            <summary>
            Create a instance of Interface Place
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IPlaceRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="placeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.GetAllPlace">
            <summary>
            Route to give all places from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.GetPlaceById(System.Int32)">
            <summary>
            Route to give only one place from database, this method uses a http get
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.InsertPlace(ISIParkAPI.Model.Place)">
            <summary>
            Route to insert a new place, this method uses a http post
            </summary>
            <param name="place"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.UpdatePlace(ISIParkAPI.Model.Place)">
            <summary>
            Route to update a place, this method uses a http put
            </summary>
            <param name="place"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceController.DeletePlace(System.Int32)">
            <summary>
            Route to delete a place from database, this method uses a http delete
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.PlaceTypeController">
            <summary>
            Class controller of PlaceType, this class have all routes of PlaceTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.PlaceTypeController._placeTypeRepository">
            <summary>
            Create a instance of Interface PlaceType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IPlaceTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="placeTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.GetAllPlaceType">
            <summary>
            Route to give all types from database, this method uses a http get
            </summary>
            <returns>All types</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.GetPlaceTypeDetails(System.Int32)">
            <summary>
            Route to give only one atype from database, this method uses a http get
            </summary>
            <param name="id">Id of the type that we want</param>
            <returns>The type that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.InsertPlaceType(ISIParkAPI.Model.PlaceType)">
            <summary>
            Route to insert a new type from database, this method uses a http put
            </summary>
            <param name="placeType">An object to represent PlaceType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.UpdatePlaceType(ISIParkAPI.Model.PlaceType)">
            <summary>
            Route to update a type from database, this method uses a http put
            </summary>
            <param name="placeType">An object to represent PlaceType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.PlaceTypeController.DeletePlaceType(System.Int32)">
            <summary>
            Route to delete a type from database, this method uses a http delete
            </summary>
            <param name="id">Id of the type that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="F:ISIParkAPI.Controllers.QRCodeController._qrCodeRepository">
            <summary>
            Create an instance of QRRepository
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.QRCodeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IQRCodeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="qrCodeRepository"></param>
        </member>
        <member name="T:ISIParkAPI.Controllers.ReportController">
            <summary>
            Class controller of Report, this class have all routes of ReportRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.ReportController._reportRepository">
            <summary>
            Create a instance of Interface Report
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IReportRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="reportRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.GetAllReport">
            <summary>
            Route to give all reports from database, this method uses a http get
            </summary>
            <returns>All reports</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.GetReportDetails(System.Int32)">
            <summary>
            Route to give only one report from database, this method uses a http get
            </summary>
            <param name="id">Id of the report that we want</param>
            <returns>The report that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.InsertReport(ISIParkAPI.Model.Report)">
            <summary>
            Route to insert a new report, this method uses a http post
            </summary>
            <param name="report">An object to represent Report</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.UpdateReport(ISIParkAPI.Model.Report)">
            <summary>
            Route to update a report from database, this method uses a http put
            </summary>
            <param name="report">An object to represent Report</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.ReportController.DeleteReport(System.Int32)">
            <summary>
            Route to delete a report from database, this method uses a http delete
            </summary>
            <param name="id">Id of the report that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.SetorController">
            <summary>
            Class controller of Sector, this class have all routes of SectorRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.SetorController._sectorRepository">
            <summary>
            Create a instance of Interface Sector
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.ISectorRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="sectorRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.GetAllSector">
            <summary>
            Route to give all sectors from database, this method uses a http get
            </summary>
            <returns>All sectors</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.GetIDBySector(System.String)">
            <summary>
            Route to give only one sector from database, this method uses a http get
            </summary>
            <param name="sector">Name of the sector that we want</param>
            <returns>The sector that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.GetSectorDetails(System.Int32)">
            <summary>
            Route to give only one sector from database, this method uses a http get
            </summary>
            <param name="id">Id of the sector that we want</param>
            <returns>The sector that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.InsertSector(ISIParkAPI.Model.Sector)">
            <summary>
            Route to insert a new sector, this method uses a http post
            </summary>
            <param name="sector">An object to represent Sector</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.UpdateSector(ISIParkAPI.Model.Sector)">
            <summary>
            Route to update a sector, this method uses a http post
            </summary>
            <param name="sector">An object to represent Sector</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SetorController.DeleteSector(System.Int32)">
            <summary>
            Route to delete a sector from database, this method uses a http delete
            </summary>
            <param name="id">Id of the sector that we want to delete</param>
            <returns>Nothing</returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.SpecialUsersController">
            <summary>
            Class controller of SpecialUser, this class have all routes of SpecialUserRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.SpecialUsersController._specialUsersRepository">
            <summary>
            Create a instance of Interface SpecialUser
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.ISpecialUsersRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="specialUsersRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.GetAllSpecialUser">
            <summary>
            Route to give all Special user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.GetSpecialUserByID(System.Int32)">
            <summary>
            Route to give only one special user from database, this method uses a http get
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.InsertSpecialUser(ISIParkAPI.Model.SpecialUser)">
            <summary>
            Route to insert a new special user, this method uses a http post
            </summary>
            <param name="specialUser"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.UpdateSpecialUser(ISIParkAPI.Model.SpecialUser)">
            <summary>
            Route to update a special user, this method uses a http post
            </summary>
            <param name="specialUser"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.SpecialUsersController.DeleteSpecialUser(System.Int32)">
            <summary>
            Route to delete a special user from database, this method uses a http delete
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserContactTypeController">
            <summary>
            Class controller of UserContactType, this class have all routes of UserContactTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserContactTypeController._userContactTypeRepository">
            <summary>
            Create a instance of Interface UserContactType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserContactTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userContactTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.GetAllUserContactType">
            <summary>
            Route to give all contact type of user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.GetUserContactTypeID(System.Int32)">
            <summary>
            Route to give only a user's contact from the database, this method uses an http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.InsertUserContactType(ISIParkAPI.Model.UserContactType)">
            <summary>
            Method to insert a contact to a user
            </summary>
            <param name="userContactType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.UpdateUserContactType(ISIParkAPI.Model.UserContactType)">
            <summary>
            Route to update a contact the user from database, this method uses a http put
            </summary>
            <param name="userContactType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserContactTypeController.DeleteUserContactType(System.Int32)">
            <summary>
            Route to delete a contact the user from database, this method uses a http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserController">
            <summary>
            Class controller of User, this class have all routes of UserRepository methods
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserController._userRepository">
            <summary>
            Create a instance of Interface User
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.GetAllUser">
            <summary>
            Route to give all user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.GetUserById(System.Int32)">
            <summary>
            Route to give only one user from database, this method uses a http get
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.UpdateUser(ISIParkAPI.Model.UserDTO)">
            <summary>
            Route to update a user, this method uses a http post
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.DeleteUser(System.Int32)">
            <summary>
            Route to delete a user from database, this method uses a http delete
            </summary>
            <param name="numero"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserController.GetUserByEmail(System.String)">
            <summary>
            Route to give only one user from database, this method uses a http get
            </summary>
            <param name="email"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserHistoryController">
            <summary>
            Class controller of UserHistoric, this class have all routes of UserHistoricRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserHistoryController._userHistoryRepository">
            <summary>
            Create a instance of Interface UserHistoric
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserHistoryController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserHistoryRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userHistoryRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserHistoryController.GetAllUserHistory">
            <summary>
            Route to give all historic of user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserHistoryController.GetUserHistoryID(System.Int32)">
            <summary>
            Route to give only one historic of user from database, this method uses a http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserHistoryController.InsertUserHistory(ISIParkAPI.Model.UserHistory)">
            <summary>
            Route to insert a new histric of user from database, this method uses a http post
            </summary>
            <param name="userHistory"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserHistoryController.DeleteUserHistory(System.Int32)">
            <summary>
            Route to delete a historic of user from database, this method uses a http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserMessageController">
            <summary>
            Class controller of UserMessage, this class have all routes of UserMessageRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserMessageController._userMessageRepository">
            <summary>
            Create a instance of Interface UserMessage
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserMessageRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userMessageRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.GetAllUserMessage(System.Int32)">
            <summary>
            Route to give all message the user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.GetUserMessageID(System.Int32)">
            <summary>
            Route to give only one message the user from database, this method uses a http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.InsertUserMessage(ISIParkAPI.Model.UserMessage)">
            <summary>
            Route to insert a new message the user from database, this method uses a http post
            </summary>
            <param name="userMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.UpdateUserMessage(ISIParkAPI.Model.UserMessage)">
            <summary>
            Route to update a message the user from database, this method uses a http put
            </summary>
            <param name="userMessage"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserMessageController.DeleteUserMessage(System.Int32)">
            <summary>
            Route to delete a message the user from database, this method uses a http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserTypeController">
            <summary>
            Class controller of UserTYpe, this class have all routes of UserTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserTypeController._userTypeRepository">
            <summary>
            Create a instance of Interface UserType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.GetAllUserType">
            <summary>
            Route to give all type user from database, this method uses a http get
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.GetUserTypeDetails(System.Int32)">
            <summary>
            Route to give only one type the user from database, this method uses a http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.InsertUserType(ISIParkAPI.Model.UserType)">
            <summary>
            Route to insert a new type of user, from the database, this method uses a post http
            </summary>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.UpdateUserType(ISIParkAPI.Model.UserType)">
            <summary>
            Route to update a type of user from database, this method uses a http put
            </summary>
            <param name="userType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserTypeController.DeleteUserType(System.Int32)">
            <summary>
            Route to delete a type of user from database, this method uses a http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.UserVechicleTypeController">
            <summary>
            Class controller of UserVechicleType, this class have all routes of UserVechicleTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.UserVechicleTypeController._userVechicleTypeRepository">
            <summary>
            Create a instance of Interface UserVechicleType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IUserVechicleTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="userVechicleTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.GetAllUserVechicleTypey">
            <summary>
            Route to give all User vehicle type from database, this method uses a http get
            </summary>
            <returns></returns>
            
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.GetUserVechicleTypeID(System.Int32)">
            <summary>
            Route to give only the vehicles of a database user, this method uses an http get
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.InsertUserVechicleType(ISIParkAPI.Model.UserVechicleType)">
            <summary>
            Route to insert a new vehicle for user from the database, this method uses an http put
            </summary>
            <param name="userVechicleType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.UpdateUserVechicleType(ISIParkAPI.Model.UserVechicleType)">
            <summary>
            Route to update a user's vehicle from the database, this method uses an http put
            </summary>
            <param name="userVechicleType"></param>
            <returns></returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.UserVechicleTypeController.DeleteUserVechicleType(System.Int32)">
            <summary>
            Route to delete a vehicle from a database user, this method uses an http delete
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ISIParkAPI.Controllers.VehicleTypeController">
            <summary>
            Class controller of VehicleType, this class have all routes of VehicleTypeRepository methods's
            </summary>
        </member>
        <member name="F:ISIParkAPI.Controllers.VehicleTypeController._vehicleTypeRepository">
            <summary>
            Create a instance of Interface VehicleType
            </summary>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.#ctor(ISIParkAPI.Data.Repositories.Interfaces.IVehicleTypeRepository)">
            <summary>
            Give a value to the instance
            </summary>
            <param name="vehicleTypeRepository"></param>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.GetAllVehickeType">
            <summary>
            Route to give all types from database, this method uses a http get
            </summary>
            <returns>All types</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.GetVehicleTypeDetails(System.Int32)">
            <summary>
            Route to give only one type from database, this method uses a http get
            </summary>
            <param name="id">Id of the type that we want</param>
            <returns>The type that corresponds the id entered</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.InsertVehicleType(ISIParkAPI.Model.VehicleType)">
            <summary>
            Route to insert a new type from database, this method uses a http put
            </summary>
            <param name="vehicleType">An object to represent VehicleType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.UpdateVehicletType(ISIParkAPI.Model.VehicleType)">
            <summary>
            Route to update a type from database, this method uses a http put
            </summary>
            <param name="vehicleType">An object to represent VehicleType</param>
            <returns>Bad or not result depending on the result</returns>
        </member>
        <member name="M:ISIParkAPI.Controllers.VehicleTypeController.DeleteVehicleType(System.Int32)">
            <summary>
            Route to delete a type from database, this method uses a http delete
            </summary>
            <param name="id">Id of the type that we want to delete</param>
            <returns>Nothing</returns>
        </member>
    </members>
</doc>
